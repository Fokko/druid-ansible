druid.host={{ ansible_fqdn }}:{{ port }}
druid.port={{ port }}
druid.service=middleManager

druid.zk.service.host={{ zookeeper }}
druid.zk.paths.base=/druid/prod

druid.discovery.curator.path=/prod/discovery

druid.db.connector.connectURI={{ mysql_connect_uri }}
druid.db.connector.user={{ mysql_druid_user }}
druid.db.connector.password={{ mysql_druid_password }}

druid.selectors.indexing.serviceName=overlord
druid.indexer.runner.startPort={{ indexer_start_port }}
druid.indexer.runner.javaOpts=-server -Xmx5g -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps

# Dedicate more resources to peons
druid.indexer.task.baseTaskDir=/app_local/tmp/persistent/task/
druid.indexer.task.chathandler.type=announce

druid.processing.buffer.sizeBytes={{ processing_buffer_size }}
druid.processing.numThreads={{ middle_manager_processing_threads }}
#druid.indexer.fork.property.druid.indexer.hadoopWorkingPath=/tmp/druid-indexing
druid.indexer.fork.property.druid.port={{ indexer_fork_port }}
druid.indexer.fork.property.druid.computation.buffer.size=536870912
druid.indexer.fork.property.druid.processing.numThreads={{ indexer_fork_threads }}
#druid.indexer.fork.property.druid.request.logging.type=file
#druid.indexer.fork.property.druid.request.logging.dir=request_logs/
#druid.indexer.fork.property.druid.segmentCache.locations=[{"path": "/druid/data/persistent/zk_druid", "maxSize": 100000000000}]
druid.indexer.fork.property.druid.server.http.numThreads={{ indexer_fork_http_threads }}

druid.indexer.fork.property.druid.storage.type={{ deep_storage_type }}
druid.indexer.task.baseTaskDir=/tmp/persistent/tasks
druid.indexer.fork.property.druid.storage.storageDirectory={{ deep_storage_location }}
druid.extensions.searchCurrentClassloader=true
druid.indexer.fork.property.druid.indexer.storage.type=db

#druid.indexer.fork.property.druid.storage.baseKey=prod/v1
#druid.indexer.fork.property.druid.storage.bucket=#{LOGS_BUCKET}

druid.worker.capacity=4
druid.worker.ip={{ ansible_fqdn }}
druid.worker.version=0

druid.storage.type={{ deep_storage_type }}
druid.storage.storageDirectory={{ deep_storage_location }}
druid.extensions.coordinates=["io.druid.extensions:druid-hdfs-storage:{{ druid_version }}"]
druid.extensions.remoteRepositories=[]
#druid.monitoring.monitors=["com.metamx.metrics.SysMonitor","com.metamx.metrics.JvmMonitor"]

# Emit metrics over http
#druid.emitter=http
#druid.emitter.http.recipientBaseUrl=#{EMITTER_URL}

# If you choose to compress ZK announcements, you must do so for every node type
druid.announcer.type=batch
druid.curator.compress=true
